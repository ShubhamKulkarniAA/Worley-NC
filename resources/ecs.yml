AWSTemplateFormatVersion: "2010-09-09"
Description: ECR stack template

Parameters:
  repoNameUI:
    Type: String
  ECSClusterName:
    Type: String
  ECSTaskUI:
    Type: String
  ContainerNameUI:
    Type: String
  repoNameAPI:
    Type: String
  ECSTaskAPI:
    Type: String
  ContainerNameAPI:
    Type: String
  VpcName:
    Type: String
  DesiredServiceCount:
    Type: String
  ALBName:
    Type: String
  ALBNameAPI:
    Type: String
  ServiceNameUI:
    Type: String
  ServiceNameAPI:
    Type: String

Resources:

  StaticContentBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: static-s3-content
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: MyStaticBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref StaticContentBucket
                - /*
      Bucket: !Ref StaticContentBucket

  CloudFrontAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${VpcName} CloudFront Origin Identity"

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: 'ALBOrigin'
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'http-only'
        DefaultCacheBehavior:
          TargetOriginId: 'ALBOrigin'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: 'none'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: 'http2'
        PriceClass: 'PriceClass_All'
        Restrictions:
          GeoRestriction:
            RestrictionType: 'none'
        DefaultRootObject: 'index.html'

  ecrRepoUI:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref repoNameUI
      ImageScanningConfiguration: 
        ScanOnPush: true

  ecrRepoAPI:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref repoNameAPI
      ImageScanningConfiguration: 
        ScanOnPush: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: environment
          Value: dev

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSTaskDefinitionUI:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ECSTaskUI
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ContainerNameUI
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ecrRepoUI}:latest"
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSTaskDefinitionAPI:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ECSTaskAPI
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ContainerNameAPI
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ecrRepoAPI}:latest"
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/my-ecs-log-group
      RetentionInDays: 30

  

  ALBSecurityGroup:  
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: worley-nerve-center-alb-ui
      GroupDescription: Allow inbound traffic to Aurora
      VpcId: !ImportValue
        Fn::Sub: "${VpcName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALBAPISecurityGroup:  
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: worley-nerve-center-alb-api
      GroupDescription: Allow inbound traffic to Aurora
      VpcId: !ImportValue
        Fn::Sub: "${VpcName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBName
      Subnets:
          - !ImportValue 
              Fn::Sub: "${VpcName}-PublicSubnet1Id"
          - !ImportValue 
              Fn::Sub: "${VpcName}-PublicSubnet2Id"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue
        Fn::Sub: "${VpcName}-VpcId"
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPort: "traffic-port" 
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            StatusCode: HTTP_301
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:ap-south-1:339712817291:certificate/169f635f-de9d-4474-b63a-a03f8e1221f1

  ApplicationLoadBalancerAPI:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ALBNameAPI
      Subnets:
          - !ImportValue 
              Fn::Sub: "${VpcName}-PrivateSubnet1Id"
          - !ImportValue 
              Fn::Sub: "${VpcName}-PrivateSubnet2Id"
      SecurityGroups:
        - !Ref ALBAPISecurityGroup
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application

  TargetGroupAPI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue
        Fn::Sub: "${VpcName}-VpcId"
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPort: "traffic-port" 
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  HTTPListenerAPI:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupAPI
      LoadBalancerArn: !Ref ApplicationLoadBalancerAPI
      Port: 80
      Protocol: HTTP

  HTTPSListenerAPI:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupAPI
      LoadBalancerArn: !Ref ApplicationLoadBalancerAPI
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:ap-south-1:339712817291:certificate/8c13e7cd-3998-4050-89c3-695fff10f748

  

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceNameUI
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredServiceCount
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinitionUI
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue 
                Fn::Sub: "${VpcName}-PublicSubnet1Id"
            - !ImportValue 
                Fn::Sub: "${VpcName}-PublicSubnet2Id" 
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ContainerNameUI
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  ECSServiceAPI:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceNameAPI
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredServiceCount
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinitionAPI
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue 
                Fn::Sub: "${VpcName}-PrivateSubnet1Id"
            - !ImportValue 
                Fn::Sub: "${VpcName}-PrivateSubnet2Id" 
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ContainerNameAPI
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroupAPI